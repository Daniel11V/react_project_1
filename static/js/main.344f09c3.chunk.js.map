{"version":3,"sources":["store.js","components/Quote.jsx","App.js","reportWebVitals.js","index.js"],"names":["quotes","id","frase","autor","color","initialState","quote","Math","floor","random","createStore","state","action","type","console","log","connect","dispatch","nextQuote","className","style","background","href","target","rel","onClick","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEMA,EAAS,CACX,CACIC,GAAI,EACJC,MAAO,+EACPC,MAAO,kBACPC,MAAO,WAEX,CACIH,GAAI,EACJC,MAAO,sIACPC,MAAO,YACPC,MAAO,WAEX,CACIH,GAAI,EACJC,MAAO,mIACPC,MAAO,cACPC,MAAO,YAKTC,EAAe,CACjBC,MAAON,EAAOO,KAAKC,MAAsB,EAAhBD,KAAKE,YAsBnBC,eAlBM,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCACnD,OAAQA,EAAOC,MACX,IAAK,aAED,OADAC,QAAQC,IAAIJ,EAAML,MAAML,IACD,IAAnBU,EAAML,MAAML,GACL,CACHK,MAAON,EAAO,IAGX,CACHM,MAAON,EAAOW,EAAML,MAAML,GAAK,IAG3C,QACI,OAAOU,M,OCdJK,eAZS,SAAAL,GAAK,MAAK,CAC9BL,MAAOK,EAAML,UAGU,SAAAW,GAAQ,MAAK,CACpCC,UADoC,WAEhCD,EAAS,CACLJ,KAAM,mBAKHG,EA1BD,SAAC,GAAD,IAAEV,EAAF,EAAEA,MAAOY,EAAT,EAASA,UAAT,OACV,sBAAKC,UAAU,aAAaC,MAAO,CAACC,WAAYf,EAAMF,MAAOA,MAAOE,EAAMF,OAA1E,UACI,sBAAKH,GAAG,YAAR,UACI,sBAAMA,GAAG,OAAT,SAAiBK,EAAMJ,QACvB,uBAAMD,GAAG,SAAT,eAAqBK,EAAMH,SAC3B,sBAAKgB,UAAU,UAAf,UACI,mBAAGG,KAAK,mCAAmCrB,GAAG,cAAcsB,OAAO,SAASC,IAAI,aAAaJ,MAAO,CAACC,WAAYf,EAAMF,OAAvH,gBACA,wBAAQH,GAAG,YAAYwB,QAAS,kBAAMP,KAAaE,MAAO,CAACC,WAAYf,EAAMF,OAA7E,6BAGR,mBAAGe,UAAU,KAAKI,OAAO,SAASC,IAAI,aAAaF,KAAK,mCAAxD,mCCCOI,MARf,WACE,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.344f09c3.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst quotes = [\r\n    {\r\n        id: 0,\r\n        frase: \"The best time to plant a tree was 20 years ago. The second best time is now.\",\r\n        autor: \"Chinese Proverb\",\r\n        color: \"#27ae60\"\r\n    },\r\n    {\r\n        id: 1,\r\n        frase: \"What’s money? A man is a success if he gets up in the morning and goes to bed at night and in between does what he wants to do\",\r\n        autor: \"Bob Dylan\",\r\n        color: \"#76daff\"\r\n    },\r\n    {\r\n        id: 2,\r\n        frase: \"It’s your place in the world; it’s your life. Go on and do all you can with it, and make it the life you want to live.\",\r\n        autor: \"Mae Jemison\",\r\n        color: \"#2c3e50\"\r\n    }\r\n]\r\n\r\n\r\nconst initialState = {\r\n    quote: quotes[Math.floor(Math.random() * 3)]\r\n}\r\n\r\n\r\nconst reducerQuote = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"NEXT_QUOTE\":\r\n            console.log(state.quote.id)\r\n            if (state.quote.id === 2) {\r\n                return {\r\n                    quote: quotes[0]\r\n                }\r\n            } else {\r\n                return {\r\n                    quote: quotes[state.quote.id + 1]\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default createStore(reducerQuote);","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst Quote = ({quote, nextQuote}) => (\r\n    <div className=\"background\" style={{background: quote.color, color: quote.color}}>\r\n        <div id=\"quote-box\">\r\n            <span id=\"text\">{quote.frase}</span>\r\n            <span id=\"author\">- {quote.autor}</span>\r\n            <div className=\"buttons\">\r\n                <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\" rel=\"noreferrer\" style={{background: quote.color}}>tw</a>\r\n                <button id=\"new-quote\" onClick={() => nextQuote()} style={{background: quote.color}}>New quote</button>\r\n            </div>\r\n        </div>\r\n        <a className=\"by\" target=\"_blank\" rel=\"noreferrer\" href=\"https://danielvinet.netlify.app/\">by Daniel Vinet</a>\r\n    </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n    quote: state.quote\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    nextQuote() {\r\n        dispatch({\r\n            type: \"NEXT_QUOTE\"\r\n        });\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quote);","import './App.css';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Quote from './components/Quote.jsx'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Quote />\n    </Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}